import "package:flutter/material.dart";
import 'package:only_believe/pages/hymn_screen.dart';


class CantiquesInspirees extends StatefulWidget {
  const CantiquesInspirees({Key key,}) : super(key: key);

  @override
  _CantiquesInspirees createState() => _CantiquesInspirees();

}

class _CantiquesInspirees extends State<CantiquesInspirees> {

  List<ListItem<String>> list;

  @override 
  void initState() {
    super.initState();
    populateData();
  }

  void populateData() {
    list = [];
    for (int i=0; i < 10; i++)
      list.add(ListItem<String>("item $i"));
  }

  @override
  Widget build(BuildContext context){
    return Scaffold (
      appBar: AppBar(
        title: Text('Cantiques inspirees'),
      ),

      body: SafeArea(
        child: ListView.builder(
            itemCount: list.length,
            itemBuilder: _getListItemTile,
        
        ),
      )
    );
  }

  Widget _getListItemTile(BuildContext context, int index){
    return GestureDetector(
    onTap: () {
      if (list.any((item) => item.isSelected)) {
         setState(() {
           list[index].isSelected = !list[index].isSelected;
         });
       }
      },

      onLongPress: () {
      
        Navigator.push(context, MaterialPageRoute(builder: (context) => Hymn(),));
        setState(() {
          list[index].isSelected = true;
        });
      },

      child:Container( 
        margin: EdgeInsets.symmetric(vertical: 4),
        color: list[index].isSelected ? Colors.red[100] : Colors.white, 
        child: ListTile(
          title: Text(list[index].data),
        ),
      )
    );
  }
}

class ListItem<T> {
  bool isSelected = false;
  T data;
  ListItem(this.data);


}

###################### ListView

child: ListView.builder(   
            itemCount: _hymnlist.length,
            itemBuilder: (context, index) {
                return ListTile(
                  //pass data to title to next screen 
                  
                  title: Text(_hymnlist[index]),
                  
                  //pass data into body means deatils of hymn
                  onTap: () {
                    Navigator.push(
                      context, 
                      MaterialPageRoute(
                        builder: (context) => Hymn(),
                        // these two allow to send data to next screen
                        settings: RouteSettings(
                          arguments: _hymnlist[index]
                        ),
                      )
                    );
                  }

                );
            }
          ),


################################ Search In view ####################################


import 'dart:convert';

import "package:flutter/material.dart";
import 'package:only_believe/pages/hymn_screen.dart';

// List of Hymn
class HymnList {
  final String title;
  final String hymn;

  HymnList(this.title, this.hymn);

}

class CantiquesInspirees extends StatefulWidget {
  const CantiquesInspirees({Key key,}) : super(key: key);

  @override
  _CantiquesInspirees createState() => _CantiquesInspirees();

}

class _CantiquesInspirees extends State<CantiquesInspirees> {
  final List _hymnlist = List<HymnList>.generate(30, 
            (i) => HymnList('Hymn $i', 'Only Believe $i'));
  TextEditingController  controller = new TextEditingController();
  
  Future<Null> getAllHymns() async {
    final response = await _hymnlist;
    final responseJson = response;

    setState(() {
      for (Map hymn in responseJson) {
        _allHymns.add(AllHymn.fromJson(hymn));
      }
    });
  }

  @override 
  void initState() {
    super.initState();

    getAllHymns();
  }

  @override
  Widget build(BuildContext context){
    return Scaffold (
      appBar: AppBar(
        title: Text("Cantiques inspirees")
      ),

      body: new Column(
        children: <Widget>[
          new SafeArea(
            child: Card(
              child: ListTile(  
                leading: new Icon(Icons.search),
                title: new TextField( 
                  controller: controller,
                  decoration: new InputDecoration(
                    hintText: 'Search', 
                    border: InputBorder.none),
                  onChanged: onSearchTextChanged,
                  ),

                  trailing: new IconButton(icon: new Icon(Icons.cancel),
                  onPressed: () {
                    controller.clear();
                    onSearchTextChanged('');
                  }),
                ),
              )
            ),
          
          new Expanded(
            child: _searchResult.length != 0 || controller.text.isNotEmpty 
              ? new ListView.builder(
                itemCount: _searchResult.length,
                itemBuilder: (context, i) {
                  return new Card(
                    child: new ListTile(
                      leading: new CircleAvatar(backgroundImage: new NetworkImage(_searchResult[i].profileUrl,),),
                      title: new Text(_searchResult[i].firstName + ' ' + _searchResult[i].lastName),
                   ),
                   margin: const EdgeInsets.all(0.0),
                  );
                },
              )
            : new ListView.builder(
              itemCount: _allHymns.length,
              itemBuilder: (context, index) {
                return new Card(
                 child: new ListTile(
                    leading: new CircleAvatar(backgroundImage: new NetworkImage(_allHymns[index].profileUrl,),),
                    title: new Text(_allHymns[index].firstName + ' ' + _allHymns[index].lastName),
                ),
                margin: const EdgeInsets.all(0.0),
                );
              },
            )
          )
        ]
      )
    );
  }

onSearchTextChanged(String text) async {
  _searchResult.clear();
  if (text.isEmpty) {
    setState(() {});
    return;
  }

  _allHymns.forEach((allHymns) {
    if (allHymns.firstName.contains(text) || allHymns.lastName.contains(text))
      _searchResult.add(allHymns);
  });
 }

}


List<AllHymn> _searchResult = [];
List<AllHymn> _allHymns = [];

final String url = 'https://jsonplaceholder.typicode.com/users';

class AllHymn { 
  final int id;
  final String firstName, lastName, profileUrl;

  AllHymn({this.id, this.firstName, this.lastName, this.profileUrl = 'https://i.amz.mshcdn.com/3NbrfEiECotKyhcUhgPJHbrL7zM=/950x534/filters:quality(90)/2014%2F06%2F02%2Fc0%2Fzuckheadsho.a33d0.jpg'});

  factory AllHymn.fromJson(Map<String, dynamic> json) {
    return new AllHymn(
      id: json['id'],
      firstName: json['name'],
      lastName: json['username'],
    );
  }

}


#####################################


import 'dart:convert';

import "package:flutter/material.dart";
import 'package:only_believe/pages/hymn_screen.dart';

// List of Hymn
class HymnList {
  final String title;
  final String hymn;

  HymnList(this.title, this.hymn);

}

Map<int, dynamic> mainDataList = { 1: "Apple", 2: "Apricot", 3: "Coconut"};

List newDataLists(){
    List<String> newlistdata = [];
    for(var value in mainDataList.values){
      newlistdata.add(value);
    }
    return newlistdata;
  }


class CantiquesInspirees extends StatefulWidget {
  const CantiquesInspirees({Key key,}) : super(key: key);

  @override
  _CantiquesInspirees createState() => _CantiquesInspirees();

}

class _CantiquesInspirees extends State<CantiquesInspirees> {
  TextEditingController _textController = TextEditingController();

  // Assign data to HymnList 
 final List _hymnlist = List<HymnList>.generate(20, (i) => HymnList('seggi', 'serge'));

  // Copy Main List into New List

  //List<String> newDataList = List.from(mainDataList);
  List<String> newDataList = newDataLists();
  
  onItemChanged(String value) {
    setState(() {
      //newDataList = mainDataList.where((string) => string.toLowerCase().contains(value.toLowerCase())).toList();
      newDataList = newDataLists().where((string) => 
                  string.toLowerCase().contains(value.toLowerCase())).toList();
    });
  }

  @override
  Widget build(BuildContext context){
    return Scaffold (
      appBar: AppBar(
        title: Text("Cantiques inspirees")
      ),

      body: Column(
        children: <Widget>[
          Padding(
            padding: const EdgeInsets.all(12.0),
            child: Card(
              child: ListTile(
                leading: new Icon(Icons.search),
                title: new TextField(
                    controller: _textController,
                    decoration: InputDecoration(
                      hintText: 'Search Hymn...',
                      border: InputBorder.none
                    ),
                    onChanged: onItemChanged,
                  ),
                  trailing: new IconButton(icon: new Icon(Icons.cancel),
                  onPressed: (){
                    _textController.clear();
                    onItemChanged('');
                  }
                  ),
              )
            )
          ),
          
          Expanded(
            child: ListView(
              padding: EdgeInsets.all(12.0),
              children: newDataList.map((data) {
                return ListTile(
                  title: Text(data),
                  onTap: () {
                    Navigator.push(
                      context, 
                      MaterialPageRoute(
                        builder: (context) => Hymn(),
                        settings: RouteSettings(
                          arguments: data,
                        )
                    
                      )
                    );
                  },
                );
              }).toList(),
            )
          )
        ],
      )
    );
  }
}


$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
ListView(
              padding: EdgeInsets.all(12.0),
              children: newDataList.map((data) {
                return ListTile(
                  title: Text(data),
                  onTap: () {
                    Navigator.push(
                      context, 
                      MaterialPageRoute(
                        builder: (context) => Hymn(),
                        settings: RouteSettings(
                          arguments: HymnList(data, data),
                        )
                    
                      )
                    );
                  },
                );
              }).toList(),

youtube-dl https://www.youtube.com/watch?v=783ccP__No8
youtube-dl https://www.youtube.com/watch?v=VjXb3PRL9WI


DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD


Expanded(
            child:  ListView(
              padding: EdgeInsets.all(12.0),
              children: newDataList.map((data){
                return ListTile(
                  title: Text(data),
                  onTap: () {
                    Navigator.push(
                      context, 
                      MaterialPageRoute(
                        builder: (context) => Hymn(),
                        settings: RouteSettings(
                          arguments: newMapTest(),
                        )
                      )
                    );
                  },
                );
              }).toList(),
            )

DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD
DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD



import 'dart:async';
import 'dart:convert';
import 'package:http/http.dart';
import "package:flutter/material.dart";
import 'package:only_believe/pages/hymn_screen.dart';

List<Map<String, String>> mapData = [{'title':'Seggi', 'hymn':'serge'}]; 

class HymnList {
  String title;
  String hymn;

  HymnList(this.title, this.hymn);
}

class CantiquesInspirees extends StatefulWidget {
  const CantiquesInspirees({Key key,}) : super(key: key);

  @override
  _CantiquesInspirees createState() => _CantiquesInspirees();

}

class _CantiquesInspirees extends State<CantiquesInspirees> {
  TextEditingController _textcontroller = TextEditingController();

  StreamController _streamController;
  Stream _stream;

  Timer _debounce;

  _onSearch(String value) async {
    if(_textcontroller.text == null || _textcontroller.text.length == 0){
      _streamController.add(null);
      return;
    }

    _streamController.add('waiting');
    _streamController.add(mapData);
  }

  @override 
  void initState(){
    super.initState();
      _streamController = StreamController();
      _stream = _streamController.stream;
  }

  @override 
  Widget build(BuildContext context){
    return Scaffold(
      appBar: AppBar(
        title: Text('Cantiques Inpirees'),
        bottom: PreferredSize(
          preferredSize: Size.fromHeight(48.0),
          child: Row(
            children: <Widget>[
              Expanded(
                child: Container(
                  margin: const EdgeInsets.only(left: 12.0, bottom: 8.0, right: 12.0),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(10.0),
                  ),
                  child: TextFormField(
                    //onChanged: String text){
                       // if(_debounce ?.isActive ?? false) _debounce.cancel();
                        //_debounce = Timer(const Duration(milliseconds: 1000),
                        //  (){
                        //      _onSearch();
                        //  }
                        //);
                    //},
                    onChanged: _onSearch,
                    controller: _textcontroller,
                    decoration: InputDecoration(
                      hintText: "Search hymn",
                      contentPadding: const EdgeInsets.only(left: 24.0),
                      border: InputBorder.none,
                    ),
                    
                  ),
                )
              ),
              //IconButton(
              //  icon: Icon(
              //    Icons.search,
              //    color: Colors.white,
              //  ),
              //  onPressed: (){
              //    _onSearch();
              //  },)
            ],
          ),
        ),
      ),

      body: StreamBuilder(
        stream: _stream,
        builder: (BuildContext context, AsyncSnapshot snapshot){
          if(snapshot.data == null){
             return Center(
               child: Text("Aucun cantique trouver"),
             );
          }
          
          if(snapshot.data == "waiting"){
            return Center(
              child: CircularProgressIndicator(),
            );
          }
          return ListView.builder(
            itemCount: snapshot.data.length,
            itemBuilder: (BuildContext context, int index){
              return ListBody(
                children: <Widget>[
                  Container(
                    child: ListTile(
                      title: Text(snapshot.data[index]['title']),
                      onTap: (){
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => Hymn(),
                            settings: RouteSettings(
                              arguments: HymnList(snapshot.data[index]['title'], snapshot.data[index]['hymn'])
                              )
                            )
                          );
                      },
                    ),
                  )
                ],
              );
            },
          );
        },
      ),
    );
  }
}

WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW

import 'dart:async';
import 'dart:convert';
import 'package:http/http.dart';
import "package:flutter/material.dart";
import 'package:only_believe/pages/hymn_screen.dart';


class HymnList {
  String title;
  String hymn;

  HymnList(this.title, this.hymn);
}

class CantiquesInspirees extends StatefulWidget {
  const CantiquesInspirees({Key key,}) : super(key: key);

  @override
  _CantiquesInspirees createState() => _CantiquesInspirees();

}

class _CantiquesInspirees extends State<CantiquesInspirees> {
  TextEditingController _textController = TextEditingController();
  Map _hymn = {'title':'seggi'};

  _getData(String value) async {
    var response = _hymn;

    if(response.length >= 0){
      setState(() => _hymn);
      print('Loaded ${_hymn.length} one');
    }
  }

 @override 
  void initState() {
    _getData;
  }

  @override 
  Widget build(BuildContext context){
    return Scaffold(
      appBar: new AppBar(
        title: new Text('Cantiques Inspirees'),
      ),

      body: new Container(
        padding: new EdgeInsets.all(16.0),
        child:  new Center(
          child:  new Column(
            children: <Widget>[
              Padding(
                padding: const EdgeInsets.all(12.0),
                child: Card(
                  child: ListTile(
                    leading: new Icon(Icons.search),
                    title:  new TextField(
                      controller: _textController, 
                      decoration: InputDecoration(
                        hintText: 'Search Hymn...',
                        border: InputBorder.none,
                        ),
                      onChanged: _getData,
                    ),
                    trailing: new IconButton(
                      icon: new Icon(Icons.cancel), 
                      onPressed: (){
                        _textController.clear();
                        _getData('');

                      }),
                  )
                )
              ),
              
              Expanded(
                child: new ListView.builder(
                  itemCount: _hymn.length,
                  itemBuilder: (BuildContext context, int index){
                    String key = _hymn.keys.elementAt(index);
                    return new Row(
                      children: <Widget>[
                        //new Text('${key}: '),
                        new Text(_hymn[key])
                      ],
                    );
                  })
                ,)
            ],
          )
        )
      )
    );
  }

 
}

KKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK



import 'dart:convert';

import "package:flutter/material.dart";
import 'package:http/http.dart';
import 'package:only_believe/pages/hymn_screen.dart';



List<Map<String, dynamic>> mainDataList = [{ '1': "Apple", '2': "Apricot", '3': "Coconut"}];

class AllHymn{
  final String title;
  final String hymn;
  

  AllHymn({this.title, this.hymn});
  
  factory AllHymn.fromMap(Map<String, dynamic> items){
    return new AllHymn(
      title: items['title'],
      hymn: items['hymn'],
    );
  }
}


List<AllHymn> _searchResult = [];
List<AllHymn> _userHymn = [];


class CantiquesInspirees extends StatefulWidget {
  const CantiquesInspirees({Key key,}) : super(key: key);

  @override
  _CantiquesInspirees createState() => _CantiquesInspirees();

}

class _CantiquesInspirees extends State<CantiquesInspirees> {
  TextEditingController _textController = TextEditingController();
  

  Future _getHymnData() async {
    //List _getData = [];
    for(Map data in mainDataList){
      _userHymn.add(AllHymn.fromMap(data));
    }
    //return _getData;
  }


  onSearchTextChanged(String text) async {
    _searchResult.clear();
    if(text.isEmpty){
      setState(() {});
      return;
    }

     _userHymn.forEach((userHymn) {
      if (userHymn.title.contains(text) || userHymn.hymn.contains(text)){
           _searchResult.add(userHymn);
           print('Suluslu ${_searchResult[0]}');
          }
      print('Serge ${userHymn.title}');
    });
    setState(() { });
  }

  // Future getHymn() async {
  //   setState(() {
  //     for(Map hymn in mainDataList){
  //        _userHymn.add(AllHymn.fromMap(hymn));
  //       print('seggi ${hymn.keys}');
  //     }
  //   });
  // }

    @override 
    void initState() {
      super.initState();
      _getHymnData();
    
    }

  @override
  Widget build(BuildContext context){
    return Scaffold (
      appBar: AppBar(
        title: Text("Cantiques inspirees"),
        elevation: 0.0,
      ),

      body: Column(
        children: <Widget>[
          new Container(
            color: Theme.of(context).primaryColor,
            child:  new Padding(
              padding: const EdgeInsets.all(8.0),
              child: new Card(
                child: new ListTile(
                  leading: new Icon(Icons.search),
                  title: new TextField(
                    controller: _textController,
                    decoration: new InputDecoration(
                      hintText: 'Search hymn...', 
                      border: InputBorder.none,
                    ),

                  onChanged: onSearchTextChanged,
                  ),

                  trailing: new IconButton(
                    icon: new Icon(Icons.cancel), 
                    onPressed: () {
                      _textController.clear();
                      onSearchTextChanged('');
                    }
                  )
                ),
              ),
            ),
          ),
          new Expanded(
            child: _searchResult.length != 0 || _textController.text.isNotEmpty ? 
                       new ListView.builder(
                         itemCount: _searchResult.length,
                         itemBuilder: (context, i) {
                           return new Card(
                             child:  new ListTile(
                               title: new Text(_searchResult[i].title),
                             ),
                             margin: const EdgeInsets.all(0.0),
                           );
                         },
                       )
                       : new ListView.builder(
                         itemCount: _userHymn.length,
                         itemBuilder: (context, index){
                           print('Marugira ${ _userHymn[index].title}');
                           return new Card(
                             child: new ListTile(
                               title: new Text(
                                _userHymn[index].title
                               ),
                             ),
                             margin: const EdgeInsets.all(0.0),
                           );
                         },
                       )
          )
                    
        ],
      )
    );
  }

  
}


DDDDDDDDDDDDDDDDDDDDRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR

import 'dart:async';
import 'dart:ui';
import 'package:only_believe/pages/hymn_screen.dart';
import 'package:path/path.dart';
import 'package:sqflite/sqflite.dart';


void main() async {
  final database = openDatabase(
    join(await getDatabasesPath(), 'christian_hymns.db'),
    onCreate: (db, version) {
      return db.execute(
        "CREATE TABLE cantiques_inspiree(id INTEGER PRIMARY KEY, title TEXT, hymn)",
      );
    },
    version: 1,
  );

  Future<void> insertHymn(Hymns hymn) async {
    final Database db = await database;
    await db.insert(
      'cantique_inspiree',
      hymn.toMap(), 
      conflictAlgorithm: ConflictAlgorithm.replace, 
    );
  }

  Future<List<Hymns>> hymn() async {
    final Database db = await database;
    final List<Map<String, dynamic>> maps = await db.query('cantiques_inspiree');

    return List.generate(maps.length, (i) {
      return Hymns(
        id: maps[i]['id'],
        title: maps[i]['title'],
        hymn: maps[i]['hymn'],
      );
    });
  }

  Future<void> updateHymn(Hymns hymn) async {
    final db = await database;
    await db.update('cantiques_inspiree', hymn.toMap(),
    where: 'id = ?',
    whereArgs: [hymn.id],
    );
  }

  Future<void> deleteHymn(int id) async {
    final db = await database;

    await db.delete(
      'cantiques_inspiree',
      where: "id = ?",
      whereArgs: [id],
    );
  }

  var cant = Hymns(
    id: 0,
    title : 'LES AILESS DUNE COLOMBE Eb',
    hymn: 35,
  );
  await insertHymn(cant);
  print(await hymn());

  cant = Hymns(
    id: cant.id,
    title: cant.title,
    hymn: cant.hymn + 7,
  );

  await updateHymn(cant);


}

class Hymns {
  final int id;
  final String title;
  final int hymn;

  Hymns({this.id, this.title, this.hymn});

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'title': title,
      'hymn': hymn,
    };
  }
}

mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm

 
import "package:flutter/material.dart";
import 'package:only_believe/pages/hymn_screen.dart';
import 'package:only_believe/pages/hymns/models.dart';

// List of Hymn to be accessed into  nextScreen
class HymnList {
  final String title;
  final String hymn;

  HymnList(this.title, this.hymn);
}


class CantiquesInspirees extends StatefulWidget {
  const CantiquesInspirees({Key key,}) : super(key: key);

  @override
  _CantiquesInspirees createState() => _CantiquesInspirees();

}

class _CantiquesInspirees extends State<CantiquesInspirees> {
  final myallhymns = loadHymn();
  //final DbAllHymns _dbAllHymns = DbAllHymns();

  @override
  Widget build(BuildContext context){
    return Scaffold (
      appBar: AppBar(
        title: Text("Cantiques inspirees"),
        actions: <Widget>[
          IconButton(
            icon: Icon(Icons.search),
            onPressed: (){
              showSearch(context: context, 
              delegate: DataSearch());
            },
          )
        ],
      ),

      body: Column(
        children: <Widget>[
          Expanded(
            child: ListView.builder(
              itemCount: myallhymns.length,
              itemBuilder: (context, index){
                return new Container(
                  child: new ListTile(
                    title: new Text(
                      myallhymns[index].title
                    ),
                    onTap: (){
                      Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => Hymn(),
                          settings: RouteSettings(
                            arguments: HymnList(myallhymns[index].title, myallhymns[index].hymn)
                          ) 
                        )
                      );
                    },
                  ),
                );
              }
            )
          )
        ],
      )
    );
  }
}

class DataSearch extends SearchDelegate<AllHymns> {
  // We access our List or Database by Calling this AllHymns

  @override
  List<Widget> buildActions(BuildContext context) {
    //actions fro app bar
    return [
      IconButton(
        icon: Icon(Icons.clear),
        onPressed: () {
          query = "";
        }
      ,)
    ];
  }

  @override
  Widget buildLeading(BuildContext context) {
    // Leading icon on the left of the app bar
    return IconButton(
      icon: AnimatedIcon(
        icon:  AnimatedIcons.menu_arrow,
        progress: transitionAnimation,
      ),
      onPressed: (){
        close(context, null);
      },
    );
  }

  @override
  Widget buildResults(BuildContext context) {
    // return Center(child: Text(query, style: TextStyle(fontSize: 20)),);
    return null;
  }

  @override
  Widget buildSuggestions(BuildContext context) {
    // Show when someone searches for something

  final myHyms = query.isEmpty? loadHymn() : loadHymn().where((string) => 
                string.title.toLowerCase().startsWith(query.toLowerCase())).toList();

   return myHyms.isEmpty? Text("No Hymns Found...", style: TextStyle(fontSize: 20),):  ListView.builder(
      itemCount: myHyms.length,
      itemBuilder: (context, index) {
        final AllHymns hymnsList = myHyms[index];
        return ListTile(
          title: RichText(
            text: TextSpan(
              text:hymnsList.title.substring(0, query.length),
              style: TextStyle(
                color: Colors.black, fontWeight: FontWeight.bold),
              children: [TextSpan(
                text: hymnsList.title.substring(query.length),
                style: TextStyle(color: Colors.grey)
                )
              ]
            ),
          ),
          
          onTap: () {
            //showResults(context);
            Navigator.push(
              context, 
              MaterialPageRoute(
                builder: (context) => Hymn(),
                settings: RouteSettings(
                  arguments: HymnList(hymnsList.title, hymnsList.hymn)
                )
              )
            );
          },
        );
      }
    );
  }
}


OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO

var databasesPath = await getDatabasesPath();
    var path = join(databasesPath, "christianHymns.db");

    var exists = await databaseExists(path);

    if (!exists) {
      print("Creating new copy from asset");

      try {
        await Directory(dirname(path)).create(recursive: true);
      } catch (_) {}

      ByteData data =
          await rootBundle.load(join("assets", "christianHymns.db"));
      List<int> bytes =
          data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);

      await File(path).writeAsBytes(bytes, flush: true);
    } else {
      print("Opening existing database");
    }

    db = await openDatabase(path, readOnly: true);



    vvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvvv



import 'dart:async';
import 'dart:io';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image_picker/image_picker.dart';
import 'package:only_believe/pages/hymn_screen.dart';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';

// Test List ++++++++++++++++++++++++++++++++

// class AllHymns{
//   final String title;
//   final String hymn;

//   AllHymns({this.title, this.hymn});

// }

// List<AllHymns> loadHymn() {
//   var hymns = <AllHymns>[
//     AllHymns(
//       title: "Alleludja",
//       hymn: 'Amen, Amen Oh Amn Alleludja'
//       ),

//     AllHymns(
//       title: 'Sur les ailes',
//       hymn: "Sur les ailes d'une colombe blanche come naige"
//       ),

//     AllHymns(
//       title: "L'ami",
//       hymn: 'Quel ami fidele etrangle....')
//   ];

//   return hymns;
// }

class DbAllHymns {
  Database _database;
  //Directory docDir =  getApplicationDocumentsDirectory() as Directory;

  // Future openDb() async {
  //   var dirDoc = await rootBundle.load('asset/databse/christianHymns.db');
  //   if (_database == null) {
  //     _database = await openDatabase(
  //         join( await getDatabasesPath(), "christianHymns.db"),
  //         version: 1, onCreate: (Database db, int version) async {
  //       await db.execute(//
  //           "CREATE TABLE cantiqueInpire(id INTEGER PRIMARYKEY, title TEXT, hymn TEXT)");
  //     });
  //   }
  // }

  Future openDb() async {
    Directory docDir = await getApplicationDocumentsDirectory();
    String path = join(docDir.path, "christianHymn.db");

    if (FileSystemEntity.typeSync(path) == FileSystemEntityType.notFound){
      ByteData data = await rootBundle.load(join('assets', "christianHymns.db"));
      List<int> bytes = data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);

      await new File(path).writeAsBytes(bytes);
    }

    
    if (_database == null) {
      Directory appDocDir = await getApplicationDocumentsDirectory();
      String databasepath = join(appDocDir.path, "christianHymns.db");

      _database = await openDatabase(databasepath);
     // initialized = true;
    }
  }

  Future<int> insertHymn(AllHymns hymn) async {
    await openDb();
    return await _database.insert('cantiqueInpire', hymn.toMap());
  }

  //This function retrieve data from db
  // Future<List<AllHymns>> getHymnsList() async {
  //   await openDb();
  //   final List<Map<String, dynamic>> maps =
  //       await _database.query('cantiqueInpire');
  //   return List.generate(maps.length, (i) {
  //     return AllHymns(
  //       id: maps[i]['id'],
  //       title: maps[i]['title'],
  //       hymn: maps[i]['hymn'],
  //     );
  //   });
  // }

  Future<List> getHymnsList() async {
    await openDb();
    List result = await _database
        .query('cantiqueInpire', columns: ['id', 'title', 'hymn']);
    return result.toList();
  }

  Future<int> updateHymn(AllHymns hymn) async {
    await openDb();
    return await _database.update('cantiqueInpire', hymn.toMap(),
        where: "id = ?", whereArgs: [hymn.id]);
  }

  Future<void> deleteHymn(int id) async {
    await openDb();
    await _database.delete("cantiqueInpire", where: "id = ?", whereArgs: [id]);
  }

  databaseExists(String path) {}
}

mixin dirDoc {}

class AllHymns {
  int id;
  String title;
  String hymn;

  AllHymns({@required this.hymn, @required this.title, this.id});
  Map<String, dynamic> toMap() {
    return {
      'title': title,
      'hymn': hymn,
    };
  }

  AllHymns.fromMap(Map<String, dynamic> map) {
    this.id = map['id'];
    this.title = map['title'];
    this.hymn = map['hymn'];
  }
}

// Build the list facilitate the retrieve of data from database

List<AllHymns> loadHymn() {
  final DbAllHymns _dballhymns = DbAllHymns();
  List<AllHymns> hymnsgot = new List();

  _dballhymns.getHymnsList().then((hymnfind) =>
      hymnfind.forEach((hymn) => hymnsgot.add(AllHymns.fromMap(hymn))));

  return hymnsgot;
}



[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]
{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}


// import 'dart:async';
// import 'dart:io';
// import 'package:flutter/foundation.dart';
// import 'package:flutter/material.dart';
// import 'package:flutter/services.dart';
// import 'package:image_picker/image_picker.dart';
// import 'package:only_believe/pages/hymn_screen.dart';
// import 'package:path/path.dart';
// import 'package:path_provider/path_provider.dart';
// import 'package:sqflite/sqflite.dart';

// class DbAllHymns {
//   Database _database;

//   Future openDb() async {
//    Directory docDir = await getApplicationDocumentsDirectory();
//    String path = join(docDir.path, "christianHymn.db");

//    if (FileSystemEntity.typeSync(path) == FileSystemEntityType.notFound){
//      ByteData data = await rootBundle.load(join('assets', "christianHymns.db"));
//      List<int> bytes = data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);

//      await new File(path).writeAsBytes(bytes);
//    }

//    if (_database == null) {
//      Directory appDocDir = await getApplicationDocumentsDirectory();
//      String databasepath = join(appDocDir.path, "christianHymns.db");

//      _database = await openDatabase(databasepath);

//    }
//   }

// }

// mixin dirDoc {}

// class AllHymns {
//   int id;
//   String title;
//   String hymn;

//   AllHymns({@required this.hymn, @required this.title, this.id});
//   Map<String, dynamic> toMap() {
//     return {
//       'title': title,
//       'hymn': hymn,
//     };
//   }

//   AllHymns.fromMap(Map<String, dynamic> map) {
//     this.id = map['id'];
//     this.title = map['title'];
//     this.hymn = map['hymn'];
//   }
// }

// // Build the list facilitate the retrieve of data from database

// List<AllHymns> loadHymn() {
//   final DbAllHymns _dballhymns = DbAllHymns();
//   List<AllHymns> hymnsgot = new List();

//   _dballhymns.getHymnsList().then((hymnfind) =>
//       hymnfind.forEach((hymn) => hymnsgot.add(AllHymns.fromMap(hymn))));

//   return hymnsgot;
// }

import 'dart:async';
import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image_picker/image_picker.dart';
import 'package:only_believe/pages/hymn_screen.dart';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';

class DbAllHymns {
  Database _database;


  Future<Database> get db async {
    if(_database != null) return _database;
    _database = await openDb();
    return _database;
  }

   openDb() async {
     String databasePath = await getDatabasesPath();
     String path = join(databasePath, "christianHymns.db");
     var db = await openDatabase(path, version: 1);
     return db;
     
    // var databasesPath = await getDatabasesPath();
    // var path = join(databasesPath, "christianHymns");

    // //var exists = await databaseExists(path);
    // await deleteDatabase(path);

    // // if (!exists){
    // //print("Creating new copy from assert");

    // try {
    //   await Directory(dirname(path)).create(recursive: true);
    // } catch (_) {}

    // ByteData data = await rootBundle.load(join("assets", "christianHymns"));
    // List<int> bytes =
    //     data.buffer.asUint8List(data.offsetInBytes, data.lengthInBytes);

    // await File(path).writeAsBytes(bytes, flush: true);
    // Database db = await openDatabase(path);

    // return db;



  }
  
  Future<int> insertHymn(AllHymns hymn) async {
    await openDb();
    return await _database.insert('cantiqueInpire', hymn.toMap());
  }

  Future<List> getHymnsList() async {
    await openDb();
    List result = await _database.query('cantiqueInpires', columns: ['id', 'title', 'hymn']);
    print(result.toList());
    return result.toList();
  }

  databaseExists(String path) {}
}


class AllHymns {
  int id;
  String title;
  String hymn;

  AllHymns({@required this.hymn, @required this.title, this.id});
  Map<String, dynamic> toMap() {
    return {
      'title': title,
      'hymn': hymn,
    };
  }

  AllHymns.fromMap(Map<String, dynamic> map) {
    this.id = map['id'];
    this.title = map['title'];
    this.hymn = map['hymn'];
  }
}

// Build the list facilitate the retrieve of data from database

List<AllHymns> loadHymn() {
  final DbAllHymns _dballhymns = DbAllHymns();
  List<AllHymns> hymnsgot = new List();

  _dballhymns.getHymnsList().then((hymnfind) =>
      hymnfind.forEach((hymn) => hymnsgot));//.add(AllHymns.fromMap(hymn))

  return hymnsgot;
}
